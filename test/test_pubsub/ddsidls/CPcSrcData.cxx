// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CPcSrcData.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "CPcSrcData.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define CPcSrcDataTimeMatch_max_cdr_typesize 526420ULL;
#define CDataBase_max_cdr_typesize 3216ULL;
#define CPcPoint_max_cdr_typesize 20ULL;
#define CPcSrcData_max_cdr_typesize 5228ULL;
#define CPcSrcPacketData_max_cdr_typesize 29220ULL;
#define CPcSrcDataTimeMatch_max_key_cdr_typesize 0ULL;
#define CDataBase_max_key_cdr_typesize 0ULL;
#define CPcPoint_max_key_cdr_typesize 0ULL;
#define CPcSrcData_max_key_cdr_typesize 0ULL;
#define CPcSrcPacketData_max_key_cdr_typesize 0ULL;

CPcPoint::CPcPoint()
{
    // float m_fX
    m_fX = 0.0;
    // float m_fY
    m_fY = 0.0;
    // float m_fZ
    m_fZ = 0.0;
    // float m_fIntensity
    m_fIntensity = 0.0;
    // float m_fConfidence
    m_fConfidence = 0.0;

}

CPcPoint::~CPcPoint()
{





}

CPcPoint::CPcPoint(
        const CPcPoint& x)
{
    m_fX = x.m_fX;
    m_fY = x.m_fY;
    m_fZ = x.m_fZ;
    m_fIntensity = x.m_fIntensity;
    m_fConfidence = x.m_fConfidence;
}

CPcPoint::CPcPoint(
        CPcPoint&& x) noexcept 
{
    m_fX = x.m_fX;
    m_fY = x.m_fY;
    m_fZ = x.m_fZ;
    m_fIntensity = x.m_fIntensity;
    m_fConfidence = x.m_fConfidence;
}

CPcPoint& CPcPoint::operator =(
        const CPcPoint& x)
{

    m_fX = x.m_fX;
    m_fY = x.m_fY;
    m_fZ = x.m_fZ;
    m_fIntensity = x.m_fIntensity;
    m_fConfidence = x.m_fConfidence;

    return *this;
}

CPcPoint& CPcPoint::operator =(
        CPcPoint&& x) noexcept
{

    m_fX = x.m_fX;
    m_fY = x.m_fY;
    m_fZ = x.m_fZ;
    m_fIntensity = x.m_fIntensity;
    m_fConfidence = x.m_fConfidence;

    return *this;
}

bool CPcPoint::operator ==(
        const CPcPoint& x) const
{

    return (m_fX == x.m_fX && m_fY == x.m_fY && m_fZ == x.m_fZ && m_fIntensity == x.m_fIntensity && m_fConfidence == x.m_fConfidence);
}

bool CPcPoint::operator !=(
        const CPcPoint& x) const
{
    return !(*this == x);
}

size_t CPcPoint::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return CPcPoint_max_cdr_typesize;
}

size_t CPcPoint::getCdrSerializedSize(
        const CPcPoint& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void CPcPoint::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_fX;
    scdr << m_fY;
    scdr << m_fZ;
    scdr << m_fIntensity;
    scdr << m_fConfidence;

}

void CPcPoint::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_fX;
    dcdr >> m_fY;
    dcdr >> m_fZ;
    dcdr >> m_fIntensity;
    dcdr >> m_fConfidence;
}

/*!
 * @brief This function sets a value in member fX
 * @param _fX New value for member fX
 */
void CPcPoint::fX(
        float _fX)
{
    m_fX = _fX;
}

/*!
 * @brief This function returns the value of member fX
 * @return Value of member fX
 */
float CPcPoint::fX() const
{
    return m_fX;
}

/*!
 * @brief This function returns a reference to member fX
 * @return Reference to member fX
 */
float& CPcPoint::fX()
{
    return m_fX;
}

/*!
 * @brief This function sets a value in member fY
 * @param _fY New value for member fY
 */
void CPcPoint::fY(
        float _fY)
{
    m_fY = _fY;
}

/*!
 * @brief This function returns the value of member fY
 * @return Value of member fY
 */
float CPcPoint::fY() const
{
    return m_fY;
}

/*!
 * @brief This function returns a reference to member fY
 * @return Reference to member fY
 */
float& CPcPoint::fY()
{
    return m_fY;
}

/*!
 * @brief This function sets a value in member fZ
 * @param _fZ New value for member fZ
 */
void CPcPoint::fZ(
        float _fZ)
{
    m_fZ = _fZ;
}

/*!
 * @brief This function returns the value of member fZ
 * @return Value of member fZ
 */
float CPcPoint::fZ() const
{
    return m_fZ;
}

/*!
 * @brief This function returns a reference to member fZ
 * @return Reference to member fZ
 */
float& CPcPoint::fZ()
{
    return m_fZ;
}

/*!
 * @brief This function sets a value in member fIntensity
 * @param _fIntensity New value for member fIntensity
 */
void CPcPoint::fIntensity(
        float _fIntensity)
{
    m_fIntensity = _fIntensity;
}

/*!
 * @brief This function returns the value of member fIntensity
 * @return Value of member fIntensity
 */
float CPcPoint::fIntensity() const
{
    return m_fIntensity;
}

/*!
 * @brief This function returns a reference to member fIntensity
 * @return Reference to member fIntensity
 */
float& CPcPoint::fIntensity()
{
    return m_fIntensity;
}

/*!
 * @brief This function sets a value in member fConfidence
 * @param _fConfidence New value for member fConfidence
 */
void CPcPoint::fConfidence(
        float _fConfidence)
{
    m_fConfidence = _fConfidence;
}

/*!
 * @brief This function returns the value of member fConfidence
 * @return Value of member fConfidence
 */
float CPcPoint::fConfidence() const
{
    return m_fConfidence;
}

/*!
 * @brief This function returns a reference to member fConfidence
 * @return Reference to member fConfidence
 */
float& CPcPoint::fConfidence()
{
    return m_fConfidence;
}



size_t CPcPoint::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return CPcPoint_max_key_cdr_typesize;
}

bool CPcPoint::isKeyDefined()
{
    return false;
}

void CPcPoint::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

CPcSrcData::CPcSrcData()    : CDataBase() 
{
    // octet m_ucLidarId
    m_ucLidarId = 0;
    // unsigned long m_unPointNums
    m_unPointNums = 0;
    // sequence<CPcPoint> m_vecPoints


}

CPcSrcData::~CPcSrcData()
{



}

CPcSrcData::CPcSrcData(
        const CPcSrcData& x)    : CDataBase(x) 
{
    m_ucLidarId = x.m_ucLidarId;
    m_unPointNums = x.m_unPointNums;
    m_vecPoints = x.m_vecPoints;
}

CPcSrcData::CPcSrcData(
        CPcSrcData&& x) noexcept     : CDataBase(std::move(x)) 
{
    m_ucLidarId = x.m_ucLidarId;
    m_unPointNums = x.m_unPointNums;
    m_vecPoints = std::move(x.m_vecPoints);
}

CPcSrcData& CPcSrcData::operator =(
        const CPcSrcData& x)
{
    CDataBase::operator =(x); 

    m_ucLidarId = x.m_ucLidarId;
    m_unPointNums = x.m_unPointNums;
    m_vecPoints = x.m_vecPoints;

    return *this;
}

CPcSrcData& CPcSrcData::operator =(
        CPcSrcData&& x) noexcept
{
    CDataBase::operator =(std::move(x)); 

    m_ucLidarId = x.m_ucLidarId;
    m_unPointNums = x.m_unPointNums;
    m_vecPoints = std::move(x.m_vecPoints);

    return *this;
}

bool CPcSrcData::operator ==(
        const CPcSrcData& x) const
{
     if (CDataBase::operator !=(x)) return false; 

    return (m_ucLidarId == x.m_ucLidarId && m_unPointNums == x.m_unPointNums && m_vecPoints == x.m_vecPoints);
}

bool CPcSrcData::operator !=(
        const CPcSrcData& x) const
{
    return !(*this == x);
}

size_t CPcSrcData::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return CPcSrcData_max_cdr_typesize;
}

size_t CPcSrcData::getCdrSerializedSize(
        const CPcSrcData& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += CDataBase::getCdrSerializedSize(data, current_alignment); 

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.vecPoints().size(); ++a)
    {
        current_alignment += CPcPoint::getCdrSerializedSize(data.vecPoints().at(a), current_alignment);}


    return current_alignment - initial_alignment;
}

void CPcSrcData::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{
    CDataBase::serialize(scdr); 

    scdr << m_ucLidarId;
    scdr << m_unPointNums;
    scdr << m_vecPoints;

}

void CPcSrcData::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{
    CDataBase::deserialize(dcdr); 

    dcdr >> m_ucLidarId;
    dcdr >> m_unPointNums;
    dcdr >> m_vecPoints;
}

/*!
 * @brief This function sets a value in member ucLidarId
 * @param _ucLidarId New value for member ucLidarId
 */
void CPcSrcData::ucLidarId(
        uint8_t _ucLidarId)
{
    m_ucLidarId = _ucLidarId;
}

/*!
 * @brief This function returns the value of member ucLidarId
 * @return Value of member ucLidarId
 */
uint8_t CPcSrcData::ucLidarId() const
{
    return m_ucLidarId;
}

/*!
 * @brief This function returns a reference to member ucLidarId
 * @return Reference to member ucLidarId
 */
uint8_t& CPcSrcData::ucLidarId()
{
    return m_ucLidarId;
}

/*!
 * @brief This function sets a value in member unPointNums
 * @param _unPointNums New value for member unPointNums
 */
void CPcSrcData::unPointNums(
        uint32_t _unPointNums)
{
    m_unPointNums = _unPointNums;
}

/*!
 * @brief This function returns the value of member unPointNums
 * @return Value of member unPointNums
 */
uint32_t CPcSrcData::unPointNums() const
{
    return m_unPointNums;
}

/*!
 * @brief This function returns a reference to member unPointNums
 * @return Reference to member unPointNums
 */
uint32_t& CPcSrcData::unPointNums()
{
    return m_unPointNums;
}

/*!
 * @brief This function copies the value in member vecPoints
 * @param _vecPoints New value to be copied in member vecPoints
 */
void CPcSrcData::vecPoints(
        const std::vector<CPcPoint>& _vecPoints)
{
    m_vecPoints = _vecPoints;
}

/*!
 * @brief This function moves the value in member vecPoints
 * @param _vecPoints New value to be moved in member vecPoints
 */
void CPcSrcData::vecPoints(
        std::vector<CPcPoint>&& _vecPoints)
{
    m_vecPoints = std::move(_vecPoints);
}

/*!
 * @brief This function returns a constant reference to member vecPoints
 * @return Constant reference to member vecPoints
 */
const std::vector<CPcPoint>& CPcSrcData::vecPoints() const
{
    return m_vecPoints;
}

/*!
 * @brief This function returns a reference to member vecPoints
 * @return Reference to member vecPoints
 */
std::vector<CPcPoint>& CPcSrcData::vecPoints()
{
    return m_vecPoints;
}


size_t CPcSrcData::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return CPcSrcData_max_key_cdr_typesize;
}

bool CPcSrcData::isKeyDefined()
{
    if (CDataBase::isKeyDefined())
        return true;
     return false;
}

void CPcSrcData::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
 CDataBase::serializeKey(scdr);  
}

CPcSrcDataTimeMatch::CPcSrcDataTimeMatch()    : CDataBase() 
{
    // octet m_ucLidarId1
    m_ucLidarId1 = 0;
    // sequence<CPcSrcData> m_vecSrcData


}

CPcSrcDataTimeMatch::~CPcSrcDataTimeMatch()
{


}

CPcSrcDataTimeMatch::CPcSrcDataTimeMatch(
        const CPcSrcDataTimeMatch& x)    : CDataBase(x) 
{
    m_ucLidarId1 = x.m_ucLidarId1;
    m_vecSrcData = x.m_vecSrcData;
}

CPcSrcDataTimeMatch::CPcSrcDataTimeMatch(
        CPcSrcDataTimeMatch&& x) noexcept     : CDataBase(std::move(x)) 
{
    m_ucLidarId1 = x.m_ucLidarId1;
    m_vecSrcData = std::move(x.m_vecSrcData);
}

CPcSrcDataTimeMatch& CPcSrcDataTimeMatch::operator =(
        const CPcSrcDataTimeMatch& x)
{
    CDataBase::operator =(x); 

    m_ucLidarId1 = x.m_ucLidarId1;
    m_vecSrcData = x.m_vecSrcData;

    return *this;
}

CPcSrcDataTimeMatch& CPcSrcDataTimeMatch::operator =(
        CPcSrcDataTimeMatch&& x) noexcept
{
    CDataBase::operator =(std::move(x)); 

    m_ucLidarId1 = x.m_ucLidarId1;
    m_vecSrcData = std::move(x.m_vecSrcData);

    return *this;
}

bool CPcSrcDataTimeMatch::operator ==(
        const CPcSrcDataTimeMatch& x) const
{
     if (CDataBase::operator !=(x)) return false; 

    return (m_ucLidarId1 == x.m_ucLidarId1 && m_vecSrcData == x.m_vecSrcData);
}

bool CPcSrcDataTimeMatch::operator !=(
        const CPcSrcDataTimeMatch& x) const
{
    return !(*this == x);
}

size_t CPcSrcDataTimeMatch::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return CPcSrcDataTimeMatch_max_cdr_typesize;
}

size_t CPcSrcDataTimeMatch::getCdrSerializedSize(
        const CPcSrcDataTimeMatch& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += CDataBase::getCdrSerializedSize(data, current_alignment); 

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.vecSrcData().size(); ++a)
    {
        current_alignment += CPcSrcData::getCdrSerializedSize(data.vecSrcData().at(a), current_alignment);}


    return current_alignment - initial_alignment;
}

void CPcSrcDataTimeMatch::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{
    CDataBase::serialize(scdr); 

    scdr << m_ucLidarId1;
    scdr << m_vecSrcData;

}

void CPcSrcDataTimeMatch::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{
    CDataBase::deserialize(dcdr); 

    dcdr >> m_ucLidarId1;
    dcdr >> m_vecSrcData;
}

/*!
 * @brief This function sets a value in member ucLidarId1
 * @param _ucLidarId1 New value for member ucLidarId1
 */
void CPcSrcDataTimeMatch::ucLidarId1(
        uint8_t _ucLidarId1)
{
    m_ucLidarId1 = _ucLidarId1;
}

/*!
 * @brief This function returns the value of member ucLidarId1
 * @return Value of member ucLidarId1
 */
uint8_t CPcSrcDataTimeMatch::ucLidarId1() const
{
    return m_ucLidarId1;
}

/*!
 * @brief This function returns a reference to member ucLidarId1
 * @return Reference to member ucLidarId1
 */
uint8_t& CPcSrcDataTimeMatch::ucLidarId1()
{
    return m_ucLidarId1;
}

/*!
 * @brief This function copies the value in member vecSrcData
 * @param _vecSrcData New value to be copied in member vecSrcData
 */
void CPcSrcDataTimeMatch::vecSrcData(
        const std::vector<CPcSrcData>& _vecSrcData)
{
    m_vecSrcData = _vecSrcData;
}

/*!
 * @brief This function moves the value in member vecSrcData
 * @param _vecSrcData New value to be moved in member vecSrcData
 */
void CPcSrcDataTimeMatch::vecSrcData(
        std::vector<CPcSrcData>&& _vecSrcData)
{
    m_vecSrcData = std::move(_vecSrcData);
}

/*!
 * @brief This function returns a constant reference to member vecSrcData
 * @return Constant reference to member vecSrcData
 */
const std::vector<CPcSrcData>& CPcSrcDataTimeMatch::vecSrcData() const
{
    return m_vecSrcData;
}

/*!
 * @brief This function returns a reference to member vecSrcData
 * @return Reference to member vecSrcData
 */
std::vector<CPcSrcData>& CPcSrcDataTimeMatch::vecSrcData()
{
    return m_vecSrcData;
}


size_t CPcSrcDataTimeMatch::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return CPcSrcDataTimeMatch_max_key_cdr_typesize;
}

bool CPcSrcDataTimeMatch::isKeyDefined()
{
    if (CDataBase::isKeyDefined())
        return true;
     return false;
}

void CPcSrcDataTimeMatch::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
 CDataBase::serializeKey(scdr);  
}

CPcSrcPacketData::CPcSrcPacketData()    : CDataBase() 
{
    // sequence<string> m_vecPacketData


}

CPcSrcPacketData::~CPcSrcPacketData()
{
}

CPcSrcPacketData::CPcSrcPacketData(
        const CPcSrcPacketData& x)    : CDataBase(x) 
{
    m_vecPacketData = x.m_vecPacketData;
}

CPcSrcPacketData::CPcSrcPacketData(
        CPcSrcPacketData&& x) noexcept     : CDataBase(std::move(x)) 
{
    m_vecPacketData = std::move(x.m_vecPacketData);
}

CPcSrcPacketData& CPcSrcPacketData::operator =(
        const CPcSrcPacketData& x)
{
    CDataBase::operator =(x); 

    m_vecPacketData = x.m_vecPacketData;

    return *this;
}

CPcSrcPacketData& CPcSrcPacketData::operator =(
        CPcSrcPacketData&& x) noexcept
{
    CDataBase::operator =(std::move(x)); 

    m_vecPacketData = std::move(x.m_vecPacketData);

    return *this;
}

bool CPcSrcPacketData::operator ==(
        const CPcSrcPacketData& x) const
{
     if (CDataBase::operator !=(x)) return false; 

    return (m_vecPacketData == x.m_vecPacketData);
}

bool CPcSrcPacketData::operator !=(
        const CPcSrcPacketData& x) const
{
    return !(*this == x);
}

size_t CPcSrcPacketData::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return CPcSrcPacketData_max_cdr_typesize;
}

size_t CPcSrcPacketData::getCdrSerializedSize(
        const CPcSrcPacketData& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += CDataBase::getCdrSerializedSize(data, current_alignment); 

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.vecPacketData().size(); ++a)
    {
        current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) +
            data.vecPacketData().at(a).size() + 1;
    }
    return current_alignment - initial_alignment;
}

void CPcSrcPacketData::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{
    CDataBase::serialize(scdr); 

    scdr << m_vecPacketData;
}

void CPcSrcPacketData::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{
    CDataBase::deserialize(dcdr); 

    dcdr >> m_vecPacketData;}

/*!
 * @brief This function copies the value in member vecPacketData
 * @param _vecPacketData New value to be copied in member vecPacketData
 */
void CPcSrcPacketData::vecPacketData(
        const std::vector<std::string>& _vecPacketData)
{
    m_vecPacketData = _vecPacketData;
}

/*!
 * @brief This function moves the value in member vecPacketData
 * @param _vecPacketData New value to be moved in member vecPacketData
 */
void CPcSrcPacketData::vecPacketData(
        std::vector<std::string>&& _vecPacketData)
{
    m_vecPacketData = std::move(_vecPacketData);
}

/*!
 * @brief This function returns a constant reference to member vecPacketData
 * @return Constant reference to member vecPacketData
 */
const std::vector<std::string>& CPcSrcPacketData::vecPacketData() const
{
    return m_vecPacketData;
}

/*!
 * @brief This function returns a reference to member vecPacketData
 * @return Reference to member vecPacketData
 */
std::vector<std::string>& CPcSrcPacketData::vecPacketData()
{
    return m_vecPacketData;
}


size_t CPcSrcPacketData::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return CPcSrcPacketData_max_key_cdr_typesize;
}

bool CPcSrcPacketData::isKeyDefined()
{
    if (CDataBase::isKeyDefined())
        return true;
     return false;
}

void CPcSrcPacketData::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
 CDataBase::serializeKey(scdr);  
}
