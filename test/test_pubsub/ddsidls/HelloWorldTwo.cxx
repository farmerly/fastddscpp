// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file HelloWorldTwo.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "HelloWorldTwo.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define HelloWorldTwo_max_cdr_typesize 272ULL;
#define HelloWorldTwo_max_key_cdr_typesize 0ULL;

HelloWorldTwo::HelloWorldTwo()
{
    // unsigned long m_id
    m_id = 0;
    // unsigned long m_type
    m_type = 0;
    // unsigned long m_subtype
    m_subtype = 0;
    // string m_message
    m_message ="";

}

HelloWorldTwo::~HelloWorldTwo()
{




}

HelloWorldTwo::HelloWorldTwo(
        const HelloWorldTwo& x)
{
    m_id = x.m_id;
    m_type = x.m_type;
    m_subtype = x.m_subtype;
    m_message = x.m_message;
}

HelloWorldTwo::HelloWorldTwo(
        HelloWorldTwo&& x) noexcept 
{
    m_id = x.m_id;
    m_type = x.m_type;
    m_subtype = x.m_subtype;
    m_message = std::move(x.m_message);
}

HelloWorldTwo& HelloWorldTwo::operator =(
        const HelloWorldTwo& x)
{

    m_id = x.m_id;
    m_type = x.m_type;
    m_subtype = x.m_subtype;
    m_message = x.m_message;

    return *this;
}

HelloWorldTwo& HelloWorldTwo::operator =(
        HelloWorldTwo&& x) noexcept
{

    m_id = x.m_id;
    m_type = x.m_type;
    m_subtype = x.m_subtype;
    m_message = std::move(x.m_message);

    return *this;
}

bool HelloWorldTwo::operator ==(
        const HelloWorldTwo& x) const
{

    return (m_id == x.m_id && m_type == x.m_type && m_subtype == x.m_subtype && m_message == x.m_message);
}

bool HelloWorldTwo::operator !=(
        const HelloWorldTwo& x) const
{
    return !(*this == x);
}

size_t HelloWorldTwo::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return HelloWorldTwo_max_cdr_typesize;
}

size_t HelloWorldTwo::getCdrSerializedSize(
        const HelloWorldTwo& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.message().size() + 1;


    return current_alignment - initial_alignment;
}

void HelloWorldTwo::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_id;
    scdr << m_type;
    scdr << m_subtype;
    scdr << m_message.c_str();

}

void HelloWorldTwo::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_id;
    dcdr >> m_type;
    dcdr >> m_subtype;
    dcdr >> m_message;
}

/*!
 * @brief This function sets a value in member id
 * @param _id New value for member id
 */
void HelloWorldTwo::id(
        uint32_t _id)
{
    m_id = _id;
}

/*!
 * @brief This function returns the value of member id
 * @return Value of member id
 */
uint32_t HelloWorldTwo::id() const
{
    return m_id;
}

/*!
 * @brief This function returns a reference to member id
 * @return Reference to member id
 */
uint32_t& HelloWorldTwo::id()
{
    return m_id;
}

/*!
 * @brief This function sets a value in member type
 * @param _type New value for member type
 */
void HelloWorldTwo::type(
        uint32_t _type)
{
    m_type = _type;
}

/*!
 * @brief This function returns the value of member type
 * @return Value of member type
 */
uint32_t HelloWorldTwo::type() const
{
    return m_type;
}

/*!
 * @brief This function returns a reference to member type
 * @return Reference to member type
 */
uint32_t& HelloWorldTwo::type()
{
    return m_type;
}

/*!
 * @brief This function sets a value in member subtype
 * @param _subtype New value for member subtype
 */
void HelloWorldTwo::subtype(
        uint32_t _subtype)
{
    m_subtype = _subtype;
}

/*!
 * @brief This function returns the value of member subtype
 * @return Value of member subtype
 */
uint32_t HelloWorldTwo::subtype() const
{
    return m_subtype;
}

/*!
 * @brief This function returns a reference to member subtype
 * @return Reference to member subtype
 */
uint32_t& HelloWorldTwo::subtype()
{
    return m_subtype;
}

/*!
 * @brief This function copies the value in member message
 * @param _message New value to be copied in member message
 */
void HelloWorldTwo::message(
        const std::string& _message)
{
    m_message = _message;
}

/*!
 * @brief This function moves the value in member message
 * @param _message New value to be moved in member message
 */
void HelloWorldTwo::message(
        std::string&& _message)
{
    m_message = std::move(_message);
}

/*!
 * @brief This function returns a constant reference to member message
 * @return Constant reference to member message
 */
const std::string& HelloWorldTwo::message() const
{
    return m_message;
}

/*!
 * @brief This function returns a reference to member message
 * @return Reference to member message
 */
std::string& HelloWorldTwo::message()
{
    return m_message;
}


size_t HelloWorldTwo::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return HelloWorldTwo_max_key_cdr_typesize;
}

bool HelloWorldTwo::isKeyDefined()
{
    return false;
}

void HelloWorldTwo::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}
